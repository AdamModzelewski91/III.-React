{"version":3,"sources":["Quote.jsx","App.js","index.js"],"names":["Quote","randomNum","apiQuotes","currentQuote","indexQuote","length","singleQuote","displayQuote","className","author","quote","App","useState","setApiQuotes","setRandomNum","setCurrentQuote","useEffect","fetch","then","response","ok","Error","status","json","data","Math","floor","random","handleRandomNum","APIAmount","newRunNum","prev","callback","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAsBeA,EApBD,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,aAE9BC,EAAaH,EAAUA,EAAUI,OAASF,GAE1CG,EAAcJ,EAAUE,GAExBG,EAAgBH,EAEpB,sBAAKI,UAAU,QAAf,UACE,6BAAKF,EAAYG,SACjB,4BAAIH,EAAYI,WAHlB,KAMF,OACE,8BACIH,KCyCOI,EAtDH,WACZ,MAAkCC,mBAAS,IAA3C,mBAAOV,EAAP,KAAkBW,EAAlB,KACA,EAAkCD,mBAAS,IAA3C,mBAAOX,EAAP,KAAkBa,EAAlB,KACA,EAAwCF,mBAAS,GAAjD,mBAAOT,EAAP,KAAqBY,EAArB,KAEAC,qBAAW,WAETC,MADY,yIAEXC,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAMF,EAASG,WAEtBJ,MAAM,SAAAC,GAAQ,OAAIA,EAASI,UAC3BL,MAAK,SAAAM,GACJX,EAAaW,GAEbV,EAAa,CAACW,KAAKC,MAAMD,KAAKE,SAASH,EAAKnB,eAC1C,IAEJ,IAAMuB,EAAkB,WACtB,IAAIC,EAAa3B,EAAUG,OACrByB,EAAYL,KAAKC,MAAMD,KAAKE,SAAWE,GAC7Cf,GAAa,SAAAiB,GAAI,4BAAQA,GAAR,CAAcD,QAS3BpB,EACJ,cAAC,EAAD,CAEET,UAAWA,EACXC,UAAWA,EACXC,aAAcA,EACd6B,SAAUJ,GAJL3B,EAAUI,QAOnB,OACE,sBAAKG,UAAU,UAAf,UACE,4CACA,sBAAKA,UAAU,MAAf,UACGP,EAAUI,OAAS,EAAI,wBAAQ4B,QAnBhB,WACjB9B,EAAeF,EAAUI,QAC1BU,GAAgB,SAAAgB,GAAI,OAAIA,EAAO,MAiBL,6BAA2D,KACnF,wBAAQE,QAASL,EAAjB,4BACClB,SChDTwB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6d3a9b9a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Quote = ({randomNum, apiQuotes, currentQuote}) => {\r\n  \r\n  const indexQuote = randomNum[randomNum.length - currentQuote]\r\n  \r\n  const singleQuote = apiQuotes[indexQuote]\r\n  \r\n  const displayQuote = !indexQuote ? \r\n    null :\r\n    <div className='quote'>\r\n      <h2>{singleQuote.author}</h2>\r\n      <p>{singleQuote.quote}</p> \r\n    </div>  \r\n\r\n  return ( \r\n    <div>   \r\n       {displayQuote}    \r\n    </div>\r\n   );\r\n}\r\n \r\nexport default Quote;","import React, { useEffect, useState} from 'react';\nimport './App.css';\nimport Quote from './Quote'\n\nconst App = () => {\nconst [apiQuotes, setApiQuotes] = useState('')\nconst [randomNum, setRandomNum] = useState('')\nconst [currentQuote, setCurrentQuote] = useState(1)\n\nuseEffect (() => {    \n  const API = 'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json'\n  fetch(API)\n  .then(response => {\n    if (response.ok){\n      return response\n    }\n    throw Error(response.status)\n  })\n  .then( response => response.json())\n  .then(data => {   \n    setApiQuotes(data) \n    //first random quote\n    setRandomNum([Math.floor(Math.random()*data.length)])  \n  })},[])    \n\n  const handleRandomNum = () => {   \n    let APIAmount =  apiQuotes.length\n    const newRunNum = Math.floor(Math.random() * APIAmount)     \n    setRandomNum(prev => [...prev, newRunNum])     \n  }  \n  \n  const handlePrevNum = () => {\n    if(currentQuote < randomNum.length ){\n      setCurrentQuote(prev => prev + 1)\n    }\n  }\n\n  const quote = \n    <Quote \n      key={randomNum.length}\n      randomNum={randomNum}\n      apiQuotes={apiQuotes}\n      currentQuote={currentQuote}  \n      callback={handleRandomNum}           \n     />\n        \n  return (\n    <div className='wrapper'>\n      <h1>III. React</h1>\n      <div className='app'>\n        {randomNum.length > 1 ? <button onClick={handlePrevNum}>Poprzedni cytat</button> : null}\n        <button onClick={handleRandomNum}>Nastepny cytat</button>\n        {quote}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}